<script src="https://usetrmnl.com/js/1.1.0/plugins.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/highcharts-more.js"></script>
<script src="https://code.highcharts.com/modules/pattern-fill.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function () {
  function renderGauge(container, value, max, label) {
    // Destroy previous chart if it exists
    if (Highcharts.charts) {
      Highcharts.charts.forEach(chart => {
        if (chart && chart.renderTo && chart.renderTo.id === container) {
          chart.destroy();
        }
      });
    }
    Highcharts.chart(container, {
      accessibility: {
        enabled: false, // not necessary for TRMNL
      },
      chart: {
        type: "gauge",
        height: 140,
        backgroundColor: "transparent"
      },
      title: null,
      pane: {
        startAngle: -150,
        endAngle: 150,
        background: [{ backgroundColor: "transparent", borderWidth: 0 }]
      },
      yAxis: {
        min: 0,
        max: max,
        endOnTick: false,
        tickPositions: [0, max],
        tickAmount: 0, // Hide ticks
        tickWidth: 0,
        lineWidth: 0,
        labels: {
          enabled: false // Hide axis labels
        },
        title: {
          text: null
        },
        plotBands: [{
          from: 0,
          to: value,
          color: {
            pattern: {
              image: "https://usetrmnl.com/images/grayscale/gray-2.png",
              width: 12,
              height: 12
            }
          },
          innerRadius: "82%",
          borderRadius: "50%"
        }, {
          from: value,
          to: max,
          color: {
            pattern: {
              image: "https://usetrmnl.com/images/grayscale/gray-5.png",
              width: 12,
              height: 12
            }
          },
          innerRadius: "82%",
          borderRadius: "50%"
        }]
      },
      plotOptions: {
        gauge: {
          animation: false,
          dial: { backgroundColor: "transparent", baseWidth: 0 },
          pivot: { backgroundColor: "transparent" }
        }
      },
      series: [{
        name: label,
        data: [value],
        dataLabels: {
          borderWidth: 0,
          useHTML: true,
          style: { fontSize: "2.8em", fontWeight: "600", color: "#000" },
          format: '<span style="font-size:0.5em;font-weight:600;color:#000">{y}</span>'
        }
      }],
      credits: { enabled: false }
    });
  }

  const renderTopMetrics = (pollen) => {
    if (!pollen) return;

    const todaysMetrics = pollen[0];

    // Render gauges
    renderGauge(
      "gauge-pollen-count",
      Number(todaysMetrics.properties?.PollenCount) || 0,
      12, // Pollen max is 12
      "Pollen"
    );
    renderGauge(
      "gauge-aqi",
      Number(todaysMetrics.properties?.AQI) || 0,
      500, // AQI max is 500
      "AQI"
    );
  };

  const data = {
    features: {{ features | json }}
  };

  // Sort by ReportDateTime in descending order
  data.features.sort((a, b) => new Date(b.properties.ReportDateTime) - new Date(a.properties.ReportDateTime));

  window.pollen = data.features;
  renderTopMetrics(data.features);
});

</script>
